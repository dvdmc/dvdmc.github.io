---
import Robot from "./Robot.astro";
import Drone from "./Drone.astro";
import Socials from "./Socials.astro";
---

<section
    class="min-h-[75vh] bg-gradient-to-t from-theme-bg to-theme-blue-light flex
            flex-col items-center justify-center text-center p-6"
>
    <img
        src="/assets/profile.webp"
        alt="David's profile picture"
        class="size-48 rounded-full shadow-lg shadow-primary-800 mb-4 animate-pulse-fade-in z-10"
    />
    <h1 class="text-3xl font-bentham font-bold z-10">David Morilla Cabello</h1>
    <p class="text-lg italic text-balance text-primary-500 z-10">
        Roboticist | PhD Candidate, Universidad de Zaragoza, Spain
    </p>

    
    <!-- Drone 1 SVG -->
    <div
    id="drone1"
    class="absolute left-1/4 top-1/3 size-16 sm:size-20 m-5 z-0"
    >
    <Drone />
</div>
<!-- Drone 2 SVG -->
    <div id="drone2" class="absolute right-1/4 top-1/6 size-14 sm:size-16 m-5 z-0">
        <Drone />
    </div>
    
    <p class="p-2 text-gray-600 italic z-10">
        davidmc (at) unizar (dot) es
        <p/>
        <Socials/>
        
        <!-- Robot SVG -->
        <div
            id="robot"
            class="relative m-5 size-12 sm:size-18 z-0"
        >
            <Robot />
        </div>

    </section>

<script>
    import { gsap } from "gsap";
    import { MotionPathPlugin } from "gsap/MotionPathPlugin";
    gsap.registerPlugin(MotionPathPlugin);

    // Lemniscate of Gerono Path (Infinity symbol like)
    const lemniscatePath = Array.from({ length: 100 }, (_, i) => {
        const t = (i / 99) * Math.PI * 2;
        const x = 100 * Math.sin(t);
        const y = 50 * Math.sin(t) * Math.cos(t);
        return { x, y };
    });

  function generateThreeLeavedRosePoints(a = 100, steps = 300) {
      const points = [];
      const totalAngle = 2 * Math.PI;
      const delta = totalAngle / steps;

      for (let i = 0; i < steps; i++) {
          const theta = i * delta;
          const r = a * Math.cos(3 * theta);
          const x = r * Math.cos(theta);
          const y = r * Math.sin(theta);
          points.push({ x, y });
      }

      // Close loop with a duplicate of the first point
      points.push({ ...points[0] });

      return points;
  }

  const rosePath = generateThreeLeavedRosePoints(200, 300);

  gsap.to("#drone1", {
      duration: 25,
      repeat: -1,
      ease: "none",
      motionPath: {
          path: rosePath,
          type: "cubic", // Smooth interpolation
          autoRotate: false,
          curviness: 1,
      },
  });

    gsap.to("#drone2", {
        duration: 6,
        repeat: -1,
        ease: "none",
        motionPath: {
            path: lemniscatePath.slice().reverse(),
        },
    });

    // Get screen width
    const screenWidth = window.innerWidth;

    gsap.to("#robot", {
  x: screenWidth/4,               // animate from -150 to +150
  duration: 6,
  repeat: -1,
  yoyo: true,
  ease: "sine.inOut",
  startAt: { x: -screenWidth/3 }, // this centers the motion around x: 0
});
</script>
